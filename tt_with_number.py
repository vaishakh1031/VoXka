import torch
from parler_tts import ParlerTTSForConditionalGeneration
from transformers import AutoTokenizer
import soundfile as sf
import numpy as np
import warnings
from concurrent.futures import ThreadPoolExecutor
import re

# Suppress warnings
warnings.filterwarnings("ignore")

# Device configuration
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
torch_dtype = torch.float16 if device.type == "cuda" else torch.float32

# Load model
print("‚è≥ Loading model and tokenizers...")
try:
    model = ParlerTTSForConditionalGeneration.from_pretrained(
        "ai4bharat/indic-parler-tts-pretrained",
        torch_dtype=torch_dtype
    ).to(device)
    model.eval()

    try:
        from optimum.bettertransformer import BetterTransformer
        model = BetterTransformer.transform(model)
        print("‚úÖ Enabled BetterTransformer optimization")
    except ImportError:
        print("‚ö†Ô∏è Install optimum for additional speed: pip install optimum")

except Exception as e:
    print(f"‚ùå Error loading model: {e}")
    exit()

try:
    tokenizer = AutoTokenizer.from_pretrained("ai4bharat/indic-parler-tts-pretrained")
    description_tokenizer = AutoTokenizer.from_pretrained(model.config.text_encoder._name_or_path)
except Exception as e:
    print(f"‚ùå Error loading tokenizers: {e}")
    exit()

# ------------------ üõ† Number Replacement Preprocessing ------------------
number_map = {
    "0": "‡≤∏‡≥ä‡≤®‡≥ç‡≤®‡≥Ü",
    "1": "‡≤í‡≤Ç‡≤¶‡≥Å",
    "2": "‡≤é‡≤∞‡≤°‡≥Å",
    "3": "‡≤Æ‡≥Ç‡≤∞‡≥Å",
    "4": "‡≤®‡≤æ‡≤≤‡≥ç‡≤ï‡≥Å",
    "5": "‡≤ê‡≤¶‡≥Å",
    "6": "‡≤Ü‡≤∞‡≥Å",
    "7": "‡≤è‡≤≥‡≥Å",
    "8": "‡≤é‡≤Ç‡≤ü‡≥Å",
    "9": "‡≤í‡≤Ç‡≤≠‡≤§‡≥ç‡≤§‡≥Å",
    "10": "‡≤π‡≤§‡≥ç‡≤§‡≥Å",
    "50": "‡≤ê‡≤µ‡≤§‡≥ç‡≤§‡≥Å",
    "100": "‡≤®‡≥Ç‡≤∞‡≥Å",
    "2000": "‡≤é‡≤∞‡≤°‡≥Å ‡≤∏‡≤æ‡≤µ‡≤ø‡≤∞",
    "2024": "‡≤é‡≤∞‡≤°‡≥Å ‡≤∏‡≤æ‡≤µ‡≤ø‡≤∞ ‡≤á‡≤™‡≥ç‡≤™‡≤§‡≥ç‡≤§‡≥ç‡≤®‡≤æ‡≤≤‡≥ç‡≤ï‡≥Å",
    "50000000": "‡≤ê‡≤¶‡≥Å ‡≤ï‡≥ã‡≤ü‡≤ø"
}

kannada_digit_map = {
    "‡≥¶": "‡≤∏‡≥ä‡≤®‡≥ç‡≤®‡≥Ü",
    "‡≥ß": "‡≤í‡≤Ç‡≤¶‡≥Å",
    "‡≥®": "‡≤é‡≤∞‡≤°‡≥Å",
    "‡≥©": "‡≤Æ‡≥Ç‡≤∞‡≥Å",
    "‡≥™": "‡≤®‡≤æ‡≤≤‡≥ç‡≤ï‡≥Å",
    "‡≥´": "‡≤ê‡≤¶‡≥Å",
    "‡≥¨": "‡≤Ü‡≤∞‡≥Å",
    "‡≥≠": "‡≤è‡≤≥‡≥Å",
    "‡≥Æ": "‡≤é‡≤Ç‡≤ü‡≥Å",
    "‡≥Ø": "‡≤í‡≤Ç‡≤≠‡≤§‡≥ç‡≤§‡≥Å"
}

def replace_numbers_with_kannada_words(text):
    # Replace English numerals
    def replace_match(match):
        number = match.group(0)
        return number_map.get(number, number)

    text = re.sub(r'\d+', replace_match, text)

    # Replace Kannada digits
    for digit, word in kannada_digit_map.items():
        text = text.replace(digit, word)

    return text
# ------------------------------------------------------------------------

# Kannada text input
kannada_text = """
‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤≠‡≤æ‡≤∑‡≥Ü ‡≤≠‡≤æ‡≤∞‡≤§‡≤¶ ‡≤ï‡≤∞‡≥ç‡≤®‡≤æ‡≤ü‡≤ï ‡≤∞‡≤æ‡≤ú‡≥ç‡≤Ø‡≤¶ ‡≤Ö‡≤ß‡≤ø‡≤ï‡≥É‡≤§ ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤Ø‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü.
‡≤á‡≤¶‡≥Å ‡≤¶‡≥ç‡≤∞‡≤æ‡≤µ‡≤ø‡≤° ‡≤≠‡≤æ‡≤∑‡≤æ ‡≤ï‡≥Å‡≤ü‡≥Å‡≤Ç‡≤¨‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤∏‡≥á‡≤∞‡≤ø‡≤¶‡≥Ü ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å ‡≥´ ‡≤ï‡≥ã‡≤ü‡≤ø ‡≤ú‡≤®‡≤∞‡≥Å ‡≤Æ‡≤æ‡≤§‡≤®‡≤æ‡≤°‡≥Å‡≤µ ‡≤™‡≥ç‡≤∞‡≤Æ‡≥Å‡≤ñ ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤Ø‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü.
‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤µ‡≥Å ‡≤Ö‡≤§‡≥ç‡≤Ø‡≤Ç‡≤§ ‡≤™‡≥ç‡≤∞‡≤æ‡≤ö‡≥Ä‡≤® ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø‡≥ä‡≤Ç‡≤¶‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü, ‡≤á‡≤¶‡≤∞ ‡≤á‡≤§‡≤ø‡≤π‡≤æ‡≤∏ ‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å 2000 ‡≤µ‡≤∞‡≥ç‡≤∑‡≤ó‡≤≥‡≤∑‡≥ç‡≤ü‡≥Å ‡≤π‡≤ø‡≤Ç‡≤¶‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤π‡≥ã‡≤ó‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü.
‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤∏‡≤æ‡≤π‡≤ø‡≤§‡≥ç‡≤Ø‡≤µ‡≥Å ‡≤Ö‡≤∏‡≤Ç‡≤ñ‡≥ç‡≤Ø‡≤æ‡≤§ ‡≤ï‡≤µ‡≤ø‡≤ó‡≤≥‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤≤‡≥á‡≤ñ‡≤ï‡≤∞‡≤ø‡≤Ç‡≤¶ ‡≤∏‡≤Æ‡≥É‡≤¶‡≥ç‡≤ß‡≤µ‡≤æ‡≤ó‡≤ø ‡≤¨‡≥Ü‡≤≥‡≥Ü‡≤¶‡≥Å ‡≤¨‡≤Ç‡≤¶‡≤ø‡≤¶‡≥Ü.
‡≤ï‡≥Å‡≤µ‡≥Ü‡≤Ç‡≤™‡≥Å, ‡≤¨‡≥á‡≤Ç‡≤¶‡≥ç‡≤∞‡≥Ü, ‡≤ï‡≤æ‡≤∞‡≤Ç‡≤§‡≤∞‡≤Ç‡≤§‡≤π ‡≤Æ‡≤π‡≤æ‡≤®‡≥ç ‡≤∏‡≤æ‡≤π‡≤ø‡≤§‡≤ø‡≤ó‡≤≥‡≥Å ‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤Ö‡≤™‡≤æ‡≤∞ ‡≤ï‡≥ä‡≤°‡≥Å‡≤ó‡≥Ü ‡≤®‡≥Ä‡≤°‡≤ø‡≤¶‡≥ç‡≤¶‡≤æ‡≤∞‡≥Ü.
‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤≤‡≤ø‡≤™‡≤ø‡≤Ø‡≥Å ‡≤§‡≤®‡≥ç‡≤®‡≤¶‡≥á ‡≤Ü‡≤¶ ‡≤Ö‡≤®‡≤®‡≥ç‡≤Ø ‡≤∏‡≥å‡≤Ç‡≤¶‡≤∞‡≥ç‡≤Ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤µ‡≥à‡≤ú‡≥ç‡≤û‡≤æ‡≤®‡≤ø‡≤ï ‡≤∞‡≤ö‡≤®‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤π‡≥ä‡≤Ç‡≤¶‡≤ø‡≤¶‡≥Ü.
‡≤á‡≤Ç‡≤¶‡≥Å ‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤µ‡≥Å ‡≤ï‡≤Ç‡≤™‡≥ç‡≤Ø‡≥Ç‡≤ü‡≤∞‡≥ç ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤Æ‡≥ä‡≤¨‡≥à‡≤≤‡≥ç ‡≤§‡≤Ç‡≤§‡≥ç‡≤∞‡≤ú‡≥ç‡≤û‡≤æ‡≤®‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤π‡≥Ü‡≤ö‡≥ç‡≤ö‡≥Å ‡≤¨‡≤≥‡≤ï‡≥Ü‡≤Ø‡≤æ‡≤ó‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü.
‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤ö‡≤≤‡≤®‡≤ö‡≤ø‡≤§‡≥ç‡≤∞‡≥ã‡≤¶‡≥ç‡≤Ø‡≤Æ‡≤µ‡≥Å ‡≤∏‡≤æ‡≤ï‡≤∑‡≥ç‡≤ü‡≥Å ‡≤™‡≥ç‡≤∞‡≤ó‡≤§‡≤ø ‡≤∏‡≤æ‡≤ß‡≤ø‡≤∏‡≤ø‡≤¶‡≥Ü ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤∞‡≤æ‡≤∑‡≥ç‡≤ü‡≥ç‡≤∞‡≥Ä‡≤Ø ‡≤Æ‡≤ü‡≥ç‡≤ü‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤Æ‡≤®‡≥ç‡≤®‡≤£‡≥Ü ‡≤™‡≤°‡≥Ü‡≤¶‡≤ø‡≤¶‡≥Ü.
‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤¶ ‡≤ß‡≥ç‡≤µ‡≤®‡≤ø‡≤Æ‡≥Ç‡≤≤‡≤ï ‡≤∂‡≥Å‡≤¶‡≥ç‡≤ß ‡≤â‡≤ö‡≥ç‡≤õ‡≤æ‡≤∞‡≤£‡≥Ü, ‡≤∂‡≥à‡≤≤‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤µ‡≥ç‡≤Ø‡≤æ‡≤ï‡≤∞‡≤£ ‡≤∂‡≤ø‡≤∏‡≥ç‡≤§‡≤ø‡≤®‡≤ø‡≤Ç‡≤¶ ‡≤á‡≤¶‡≥Å ‡≤®‡≤ø‡≤∞‡≥ç‡≤¶‡≤ø‡≤∑‡≥ç‡≤ü ‡≤∏‡≥ç‡≤•‡≤æ‡≤®‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤π‡≥ä‡≤Ç‡≤¶‡≤ø‡≤¶‡≥Ü.
‡≤µ‡≤ø‡≤¶‡≥ç‡≤Ø‡≤æ‡≤∞‡≥ç‡≤•‡≤ø‡≤ó‡≤≥‡≤ø‡≤Ç‡≤¶ ‡≤π‡≤ø‡≤°‡≤ø‡≤¶‡≥Å ‡≤∏‡≤Ç‡≤∂‡≥ã‡≤ß‡≤ï‡≤∞‡≤µ‡≤∞‡≥Ü‡≤ó‡≥Ü ‡≤é‡≤≤‡≥ç‡≤≤‡≤∞‡≥Ç ‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤¶ ‡≤Æ‡≤π‡≤§‡≥ç‡≤µ‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤ó‡≥Å‡≤∞‡≥Å‡≤§‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥ç‡≤¶‡≤æ‡≤∞‡≥Ü.
‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤Ø ‡≤¨‡≥ã‡≤ß‡≤®‡≥Ü ‡≤á‡≤§‡≥ç‡≤§‡≥Ä‡≤ö‡≤ø‡≤® ‡≤¶‡≤ø‡≤®‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø ‡≤á‡≤®‡≥ç‡≤ü‡≤∞‡≥ç‚Äå‡≤®‡≥Ü‡≤ü‡≥ç ‡≤Æ‡≥Ç‡≤≤‡≤ï‡≤µ‡≥Ç ‡≤∏‡≤π ‡≤∏‡≥Å‡≤≤‡≤≠‡≤µ‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü.
‡≤Ö‡≤®‡≥á‡≤ï ‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤µ‡≥Ü‡≤¨‡≥ç‚Äå‡≤∏‡≥à‡≤ü‡≥ç‚Äå‡≤ó‡≤≥‡≥Å, ‡≤Ü‡≤™‡≥ç‚Äå‡≤ó‡≤≥‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤™‡≤æ‡≤†‡≤ï‡≥ç‡≤∞‡≤Æ‡≤ó‡≤≥‡≥Å ‡≤à ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≤∑‡≥ç‡≤ü‡≥Å ‡≤ú‡≤®‡≤™‡≥ç‡≤∞‡≤ø‡≤Ø‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤µ‡≥Ü.
‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤®‡≥Å‡≤°‡≤ø‡≤ó‡≤ü‡≥ç‡≤ü‡≥Å‡≤ó‡≤≥‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤ó‡≤æ‡≤¶‡≥Ü‡≤ó‡≤≥‡≥Å ‡≤ú‡≤®‡≤ú‡≥Ä‡≤µ‡≤®‡≤¶ ‡≤™‡≥ç‡≤∞‡≤§‡≤ø ‡≤Ö‡≤Ç‡≤ó‡≤¶‡≤≤‡≥ç‡≤≤‡≥Ç ‡≤∂‡≥ç‡≤∞‡≥á‡≤∑‡≥ç‡≤†‡≤§‡≥Ü ‡≤§‡≤æ‡≤≥‡≤ø‡≤µ‡≥Ü.
‡≤®‡≤Æ‡≥ç‡≤Æ ‡≤∞‡≤æ‡≤ú‡≥ç‡≤Ø‡≤¶ ‡≤Ü‡≤°‡≤≥‡≤ø‡≤§, ‡≤∂‡≤ø‡≤ï‡≥ç‡≤∑‡≤£ ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤Æ‡≤æ‡≤ß‡≥ç‡≤Ø‡≤Æ‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø ‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤¶ ‡≤™‡≥ç‡≤∞‡≤æ‡≤¨‡≤≤‡≥ç‡≤Ø ‡≤Æ‡≥Å‡≤Ç‡≤¶‡≥Å‡≤µ‡≤∞‡≥Ü‡≤¶‡≤ø‡≤¶‡≥Ü.
‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤¶ ‡≤ú‡≥ä‡≤§‡≥Ü‡≤ó‡≥Ü ‡≤¨‡≥Ü‡≤≥‡≥Ü‡≤¶‡≥Å ‡≤¨‡≤Ç‡≤¶ ‡≤ú‡≤®‡≤™‡≤¶ ‡≤∏‡≤æ‡≤π‡≤ø‡≤§‡≥ç‡≤Ø, ‡≤π‡≤æ‡≤°‡≥Å‡≤ó‡≤≥‡≥Å, ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤®‡≥É‡≤§‡≥ç‡≤Ø‡≤ó‡≤≥‡≥Å ‡≤®‡≤Æ‡≥ç‡≤Æ ‡≤∏‡≤Ç‡≤∏‡≥ç‡≤ï‡≥É‡≤§‡≤ø‡≤ó‡≥Ü ‡≤ú‡≥Ä‡≤µ‡≤Ç‡≤§‡≤§‡≥Ü ‡≤®‡≥Ä‡≤°‡≥Å‡≤§‡≥ç‡≤§‡≤µ‡≥Ü.
‡≤µ‡≤ø‡≤µ‡≤ø‡≤ß ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤ó‡≤≥ ‡≤®‡≤°‡≥Å‡≤µ‡≥Ü ‡≤á‡≤¶‡≥ç‡≤¶‡≤∞‡≥Ç ‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤§‡≤®‡≥ç‡≤® ‡≤µ‡≥à‡≤∂‡≤ø‡≤∑‡≥ç‡≤ü‡≥ç‡≤Ø‡≤§‡≥Ü ‡≤π‡≤æ‡≤ó‡≥Ç ‡≤∂‡≥ç‡≤∞‡≥á‡≤∑‡≥ç‡≤†‡≤§‡≥Ü‡≤Ø‡≤ø‡≤Ç‡≤¶ ‡≤™‡≥à‡≤™‡≥ã‡≤ü‡≤ø‡≤ó‡≥Ü ‡≤§‡≥ä‡≤°‡≤ó‡≤ø‡≤¶‡≥Ü.
‡≤™‡≥ç‡≤∞‡≤§‡≤ø ‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤ø‡≤ó‡≤®‡≥Å ‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤¶ ‡≤¨‡≤ó‡≥ç‡≤ó‡≥Ü ‡≤π‡≥Ü‡≤Æ‡≥ç‡≤Æ‡≥Ü ‡≤™‡≤°‡≤¨‡≥á‡≤ï‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤®‡≤ø‡≤§‡≥ç‡≤Ø ‡≤¨‡≤≥‡≤ï‡≥Ü‡≤Ø‡≤≤‡≥ç‡≤≤‡≤ø ‡≤™‡≥ç‡≤∞‡≥ã‡≤§‡≥ç‡≤∏‡≤æ‡≤π‡≤ø‡≤∏‡≤¨‡≥á‡≤ï‡≥Å.
‡≤Ö‡≤Ç‡≤§‡≤∞‡≥ç‡≤ú‡≤æ‡≤≤ ‡≤Ø‡≥Å‡≤ó‡≤¶‡≤≤‡≥ç‡≤≤‡≥Ç ‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤¶ ‡≤∏‡≤Ç‡≤∏‡≥ç‡≤ï‡≥É‡≤§‡≤ø‡≤Ø ‡≤∏‡≤Ç‡≤∞‡≤ï‡≥ç‡≤∑‡≤£‡≥Ü ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤Ö‡≤≠‡≤ø‡≤µ‡≥É‡≤¶‡≥ç‡≤ß‡≤ø‡≤ó‡≥Ü ‡≤®‡≤æ‡≤µ‡≥Å ‡≤Æ‡≥Å‡≤Ç‡≤¶‡≤æ‡≤ó‡≤¨‡≥á‡≤ï‡≥Å.
‡≤¨‡≤æ‡≤≤‡≤ï‡≤Ç‡≤¶‡≤ø‡≤ó‡≤∞‡≤ø‡≤Ç‡≤¶ ‡≤π‡≤ø‡≤∞‡≤ø‡≤Ø ‡≤®‡≤æ‡≤ó‡≤∞‡≤ø‡≤ï‡≤∞ ‡≤§‡≤®‡≤ï ‡≤é‡≤≤‡≥ç‡≤≤‡≤∞‡≤ø‡≤ó‡≥Ç ‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤Ö‡≤∞‡≤ø‡≤Ø‡≤≤‡≥Å ‡≤π‡≥Ü‡≤ö‡≥ç‡≤ö‡≤ø‡≤® ‡≤Ö‡≤µ‡≤ï‡≤æ‡≤∂‡≤ó‡≤≥‡≥Å ‡≤≤‡≤≠‡≥ç‡≤Ø‡≤µ‡≤ø‡≤µ‡≥Ü.
‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤®‡≤æ‡≤ü‡≤ï‡≤ó‡≤≥‡≥Å, ‡≤∏‡≤ø‡≤®‡≤ø‡≤Æ‡≤æ‡≤ó‡≤≥‡≥Å, ‡≤ï‡≤ø‡≤∞‡≥Å‡≤ö‡≤ø‡≤§‡≥ç‡≤∞‡≤ó‡≤≥‡≥Å ‡≤∏‡≤π ‡≤à ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤Ø ‡≤∏‡≤æ‡≤Ç‡≤∏‡≥ç‡≤ï‡≥É‡≤§‡≤ø‡≤ï ‡≤∂‡≤ï‡≥ç‡≤§‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤¨‡≤ø‡≤Ç‡≤¨‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤µ‡≥Ü.
‡≤Æ‡≤ü‡≥ç‡≤ü‡≤Æ‡≤ü‡≥ç‡≤ü‡≤¶ ‡≤∏‡≤æ‡≤π‡≤ø‡≤§‡≥ç‡≤Ø ‡≤∏‡≤Ç‡§Æ‡•á‡§≤‡≤®‡≤ó‡≤≥‡≥Å ‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤∏‡≥É‡≤ú‡≤®‡≤∂‡≥Ä‡≤≤‡≤§‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤¨‡≥Ü‡≤≥‡≥Ü‡≤∏‡≤≤‡≥Å ‡≤∏‡≤π‡≤ï‡≤æ‡≤∞‡≤ø‡≤Ø‡≤æ‡≤ó‡≤ø‡≤µ‡≥Ü.
‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤ï‡≥Ä‡≤Ø, ‡≤µ‡≤ø‡≤ú‡≥ç‡≤û‡≤æ‡≤®, ‡≤§‡≤Ç‡≤§‡≥ç‡≤∞‡≤ú‡≥ç‡≤û‡≤æ‡≤® ‡≤ï‡≥ç‡≤∑‡≥á‡≤§‡≥ç‡≤∞‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø‡≤Ø‡≥Ç ‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤π‡≥Ü‡≤ö‡≥ç‡≤ö‡≤ø‡≤® ‡≤∏‡≤Ç‡≤™‡≤§‡≥ç‡≤§‡≥Å ‡≤∏‡≥É‡≤∑‡≥ç‡≤ü‡≤ø‡≤Ø‡≤æ‡≤ó‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü.
‡≤≠‡≤¶‡≥ç‡≤∞‡≤§‡≥Ü, ‡≤∏‡≤Ç‡≤∏‡≥ç‡≤ï‡≥É‡≤§‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤§‡≤æ‡≤Ø‡≤ø ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤Ø ‡≤ó‡≥å‡≤∞‡≤µ ‡≤â‡≤≥‡≤ø‡≤∏‡≤≤‡≥Å ‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤¶ ‡≤¨‡≤≥‡≤ï‡≥Ü ‡≤Ö‡≤§‡≥ç‡≤Ø‡≤ó‡≤§‡≥ç‡≤Ø‡≤µ‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü.
‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤Ø ‡≤¨‡≤≥‡≤ï‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≥ç‡≤∞‡≤æ‡≤ö‡≥Ä‡≤® ‡≤∂‡≤æ‡≤∏‡≤®‡≤ó‡≤≥‡≤ø‡≤Ç‡≤¶ ‡≤π‡≤ø‡≤°‡≤ø‡≤¶‡≥Å ‡≤á‡≤§‡≥ç‡≤§‡≥Ä‡≤ö‡≤ø‡≤® ‡≤°‡≤ø‡≤ú‡≤ø‡≤ü‡≤≤‡≥ç ‡≤Æ‡≤æ‡≤ß‡≥ç‡≤Ø‡≤Æ‡≤ó‡≤≥‡≤µ‡≤∞‡≥Ü‡≤ó‡≥Ü ‡≤ï‡≤æ‡≤£‡≤¨‡≤π‡≥Å‡≤¶‡≥Å.
‡≤á‡≤¶‡≥Å ‡≤∏‡≤Ç‡≤∏‡≥ç‡≤ï‡≥É‡≤§‡≤¶ ‡≤™‡≥ç‡≤∞‡≤≠‡≤æ‡≤µ‡≤µ‡≤®‡≥ç‡≤®‡≥Ç, ‡≤Ü‡≤¶‡≤∞‡≥Ü ‡≤§‡≤®‡≥ç‡≤®‡≤¶‡≥á ‡≤Ü‡≤¶ ‡≤∂‡≤¨‡≥ç‡≤¶‡≤∏‡≤Ç‡≤™‡≤§‡≥ç‡≤§‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Ç ‡≤π‡≥ä‡≤Ç‡≤¶‡≤ø‡≤∞‡≥Å‡≤µ ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤Ø‡≤æ‡≤ó‡≤ø‡≤¶‡≥ç‡≤¶‡≥Å, ‡≤™‡≤∞‡≤ø‡≤∑‡≥ç‡≤ï‡≥É‡≤§‡≤∞‡≥Ç‡≤™‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤¨‡≥Ü‡≤≥‡≥Ü‡≤Ø‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü.
‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤á‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ç ‡≤π‡≤≤‡≤µ‡≥Å ‡≤ó‡≥ç‡≤∞‡≤æ‡≤Æ‡≥Ä‡≤£ ‡≤∂‡≥à‡≤≤‡≤ø‡≤ó‡≤≥‡≥Å, ‡≤™‡≥ç‡≤∞‡≤æ‡≤¶‡≥á‡≤∂‡≤ø‡≤ï ‡≤â‡≤™‡≤≠‡≤æ‡≤∑‡≥Ü‡≤ó‡≤≥‡≥Å ‡≤ú‡≥Ä‡≤µ‡≤Ç‡≤§‡≤µ‡≤æ‡≤ó‡≤ø‡≤µ‡≥Ü.
‡≤á‡≤µ‡≥Å‡≤ó‡≤≥‡≤ø‡≤Ç‡≤¶ ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤Ø ‡≤µ‡≥à‡≤µ‡≤ø‡≤ß‡≥ç‡≤Ø‡≤§‡≥Ü ‡≤π‡≤æ‡≤ó‡≥Ç ‡≤∏‡≥ç‡≤•‡≤≥‡≥Ä‡≤Ø ‡≤∏‡≤Ç‡≤∏‡≥ç‡≤ï‡≥É‡≤§‡≤ø‡≤Ø ‡≤™‡≥Ç‡≤∞‡≤ï‡≤§‡≥Ü ‡≤∏‡≥ç‡≤™‡≤∑‡≥ç‡≤ü‡≤µ‡≤æ‡≤ó‡≤ø ‡≤ó‡≥ã‡≤ö‡≤∞‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü.
‡≤Ö‡≤ï‡≥ç‡≤∑‡≤∞‡≤Æ‡≤æ‡≤≤‡≥Ü‡≤Ø ‡≤µ‡≥à‡≤ú‡≥ç‡≤û‡≤æ‡≤®‡≤ø‡≤ï ‡≤µ‡≤ø‡≤®‡≥ç‡≤Ø‡≤æ‡≤∏‡≤¶‡≤ø‡≤Ç‡≤¶ ‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤ï‡≤Ç‡≤™‡≥ç‡≤Ø‡≥Ç‡≤ü‡≤∞‡≥ç ‡≤™‡≥ç‡≤∞‡≥ä‡≤ó‡≥ç‡≤∞‡≤æ‡≤Æ‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤π‡≤æ‡≤ó‡≥Ç ‡≤ï‡≤≤‡≤ø‡≤ï‡≤æ ‡≤∏‡≤æ‡≤ß‡≤®‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≥Ç ‡≤¨‡≤≥‡≤∏‡≤¨‡≤π‡≥Å‡≤¶‡≥Å.
‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤¶ ‡≤¨‡≤æ‡≤≤ ‡≤∏‡≤æ‡≤π‡≤ø‡≤§‡≥ç‡≤Ø ‡≤Æ‡≤ï‡≥ç‡≤ï‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø ‡≤≠‡≤æ‡≤∑‡≤æ ‡≤™‡≥ç‡≤∞‡≥Ä‡≤§‡≤ø ‡≤¨‡≥Ü‡≤≥‡≥Ü‡≤∏‡≥Å‡≤µ‡≤≤‡≥ç‡≤≤‡≤ø ‡≤™‡≥ç‡≤∞‡≤Æ‡≥Å‡≤ñ ‡≤™‡≤æ‡≤§‡≥ç‡≤∞ ‡≤µ‡≤π‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü.
‡≤µ‡≤ø‡≤∂‡≥ç‡≤µ‡≤¶ ‡≤π‡≤≤‡≤µ‡≥Ü‡≤°‡≥Ü ‡≤®‡≥Ü‡≤≤‡≥Ü‡≤∏‡≤ø‡≤∞‡≥Å‡≤µ ‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤ø‡≤ó‡≤∞‡≥Å ‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤¶ ‡≤π‡≤∞‡≤°‡≥Å‡≤µ‡≤ø‡≤ï‡≥Ü‡≤ó‡≥Ü ‡≤¨‡≤π‡≥Å‡≤Æ‡≥Ç‡≤≤‡≥ç‡≤Ø ‡≤ï‡≥ä‡≤°‡≥Å‡≤ó‡≥Ü ‡≤®‡≥Ä‡≤°‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥ç‡≤¶‡≤æ‡≤∞‡≥Ü.
‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤Ø ‡≤™‡≥ç‡≤∞‡≤∏‡≤æ‡≤∞‡≤ï‡≥ç‡≤ï‡≤æ‡≤ó‡≤ø ‡≤™‡≥ç‡≤∞‡≤∏‡≥ç‡≤§‡≥Å‡≤§ ‡≤π‡≤≤‡≤µ‡≥Å ‡≤™‡≤æ‡≤°‡≥ç‚Äå‡≤ï‡≥ç‡≤Ø‡≤æ‡≤∏‡≥ç‡≤ü‡≥ç‚Äå‡≤ó‡≤≥‡≥Å, ‡≤Ø‡≥Ç‡≤ü‡≥ç‡≤Ø‡≥Ç‡≤¨‡≥ç ‡≤ö‡≤æ‡≤®‡≥Ü‡≤≤‡≥ç‚Äå‡≤ó‡≤≥‡≥Å ‡≤ú‡≤®‡≤™‡≥ç‡≤∞‡≤ø‡≤Ø‡≤µ‡≤æ‡≤ó‡≤ø‡≤µ‡≥Ü.
‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤¶ ‡≤µ‡≥ç‡≤Ø‡≤æ‡≤ï‡≤∞‡≤£, ‡≤§‡≤§‡≥ç‡≤µ‡≤∂‡≤æ‡≤∏‡≥ç‡≤§‡≥ç‡≤∞, ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤ö‡≤∞‡≤ø‡≤§‡≥ç‡≤∞‡≥Ü ‡≤ï‡≥Å‡≤∞‡≤ø‡≤§ ‡≤Ö‡≤ß‡≥ç‡≤Ø‡≤Ø‡≤®‡≤µ‡≥Ç ‡≤µ‡≤ø‡≤∂‡≥ç‡≤µ‡≤¶ ‡≤π‡≤≤‡≤µ‡≥Å ‡≤µ‡≤ø‡≤∂‡≥ç‡≤µ‡≤µ‡≤ø‡≤¶‡≥ç‡≤Ø‡≤æ‡≤≤‡≤Ø‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø ‡≤®‡≤°‡≥Ü‡≤Ø‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü.
‡≤á‡≤Ç‡≤§‡≤π ‡≤∏‡≤Ç‡≤™‡≥Ç‡≤∞‡≥ç‡≤£‡≤§‡≥Ü‡≤Ø‡≤ø‡≤Ç‡≤¶ ‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤®‡≤ø‡≤ú‡≤ï‡≥ç‡≤ï‡≥Ç ‡≤ú‡≤ó‡≤§‡≥ç‡≤§‡≤ø‡≤® ‡≤∂‡≥ç‡≤∞‡≥á‡≤∑‡≥ç‡≤† ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤ó‡≤≥ ‡≤™‡≥à‡≤ï‡≤ø ‡≤í‡≤Ç‡≤¶‡≤æ‡≤ó‡≤ø ‡≤¨‡≥Ü‡≤≥‡≥Ü‡≤Ø‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü.




""".strip()

# ‚úÖ Apply number word replacement
kannada_text = replace_numbers_with_kannada_words(kannada_text)

# Voice description
voice_description = "A professional female speaker Anu, speaks with clear pronunciation and moderate pacing"


print(f"üî† Processing {len(kannada_text)} characters...")

# Split into sentences
sentences = [s.strip() + '.' for s in kannada_text.split('.') if s.strip()]
print(f"üìú Found {len(sentences)} sentences")

# Pre-tokenize description
with torch.no_grad():
    description_inputs = description_tokenizer(
        voice_description,
        return_tensors="pt",
        max_length=512,
        truncation=True
    ).to(device)

# Generation config
generation_config = {
    'do_sample': True,
    'temperature': 0.95,
    'top_k': 50,
    'top_p': 0.95,
    'max_new_tokens': 1024,
    'num_beams': 1,
    'use_cache': True
}

# Sentence processor
def process_sentence(sentence):
    try:
        with torch.no_grad():
            inputs = tokenizer(
                sentence,
                return_tensors="pt",
                max_length=512,
                truncation=True
            ).to(device)

            audio = model.generate(
                input_ids=description_inputs.input_ids,
                attention_mask=description_inputs.attention_mask,
                prompt_input_ids=inputs.input_ids,
                prompt_attention_mask=inputs.attention_mask,
                **generation_config
            )
            return audio.cpu().numpy().squeeze().astype('float32')
    except Exception as e:
        print(f"‚ö†Ô∏è Error processing sentence: {e}")
        return None

# Generate audio
sampling_rate = model.config.sampling_rate
full_audio = np.array([])
batch_size = 4

print("üéµ Generating audio in batches...")
for i in range(0, len(sentences), batch_size):
    batch = sentences[i:i + batch_size]
    with ThreadPoolExecutor() as executor:
        batch_results = list(executor.map(process_sentence, batch))

    for j, audio_arr in enumerate(batch_results):
        if audio_arr is not None:
            full_audio = np.concatenate((full_audio, audio_arr))
            if j < len(batch_results) - 1:
                full_audio = np.concatenate((
                    full_audio,
                    np.zeros(int(0.15 * sampling_rate))
                ))
    print(f"‚úÖ Processed batch {i // batch_size + 1}/{(len(sentences) // batch_size) + 1}")

# Save output
output_file = "kannada_tts_optimized.wav"
sf.write(output_file, full_audio, sampling_rate)
print(f"\nüéâ Successfully saved to {output_file}")
print(f"‚è±Ô∏è Duration: {len(full_audio)/sampling_rate:.2f} seconds")
